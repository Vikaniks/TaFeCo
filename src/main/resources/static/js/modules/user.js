import { redirectIfLoggedIn, authFetch } from './auth.js';
import { saveUserData, mappings } from './storage.js';

// –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–æ—Ä–º—ã
function collectUserDataFromForm() {
  const form = document.getElementById('register-form');
  if (!form) return;

  const nameInput = document.getElementById('name');
  const surnameInput = document.getElementById('surname');
  const phoneInput = document.getElementById('phone');
  const emailInput = document.getElementById('email');

  const formData = {};

  const savedData = localStorage.getItem("userData");
  if (savedData) {
      const userData = JSON.parse(savedData);
      if (userData.name) nameInput.value = userData.name;
      if (userData.surname) surnameInput.value = userData.surname;
      if (userData.phone) phoneInput.value = userData.phone;
      if (userData.email) emailInput.value = userData.email;
  } else {
      saveUserData();
  }

  for (const key in mappings) {
    const el = document.getElementById(mappings[key]);
    if (el) {
      formData[key] = el.value?.trim?.() || '';
    }
  }

  // –ü–∞—Ä–æ–ª—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  formData.password = document.getElementById('password')?.value || '';
  formData.confirmPassword = document.getElementById('confirm-password')?.value || '';

  return formData;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
export function handleRegistration(event) {
  event.preventDefault();

  const nameInput = document.getElementById('name');
  const surnameInput = document.getElementById('surname');
  const phoneInput = document.getElementById('phone');
  const emailInput = document.getElementById('email');

  const formData = collectUserDataFromForm();

  function showErrorMessage(field, message) {
          const errorSpan = field.nextElementSibling;
          if (!errorSpan || !errorSpan.classList.contains("error-message")) return;

          errorSpan.textContent = message;
          errorSpan.style.display = "block";
          field.classList.add("error");
      }

      function clearErrorMessage(field) {
          const errorSpan = field.nextElementSibling;
          if (!errorSpan || !errorSpan.classList.contains("error-message")) return;

          errorSpan.textContent = "";
          errorSpan.style.display = "none";
          field.classList.remove("error");
      }

  function validateField(field) {
          let isValid = true;

          if (field.value.trim() === "") {
              showErrorMessage(field, "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ");
              isValid = false;
          } else {
              clearErrorMessage(field);
          }

          if (field === nameInput || field === surnameInput) {
              const namePattern = /^[–ê-–Ø–∞-—è–Å—ëA-Za-z]+$/;
              if (!namePattern.test(field.value.trim())) {
                  showErrorMessage(field, "–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã");
                  isValid = false;
              }
          }


          if (field === phoneInput) {
              const phonePattern = /^\+7 \(\d{3}\) \d{3} \d{2} \d{2}$/;
              if (!phonePattern.test(field.value.trim())) {
                  showErrorMessage(field, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä");
                  isValid = false;
              }
          }

          if (field === emailInput) {
              const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
              if (!emailPattern.test(field.value.trim())) {
                  showErrorMessage(field, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email");
                  isValid = false;
              }
          }

          return isValid;
      }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
  const requiredFields = ['name', 'surname', 'phone', 'email', 'locality', 'street', 'house', 'apartment', 'password', 'confirmPassword'];
  for (const field of requiredFields) {
    if (!formData[field]) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.');
      return;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
  const passwordRegex = /^(?=.*[A-Z])(?=.*\d).{8,}$/;
  if (!passwordRegex.test(formData.password)) {
    alert('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤, –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É –∏ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É.');
    return;
  }

  if (formData.password !== formData.confirmPassword) {
    alert('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.');
    return;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const requestData = { ...formData };
  delete requestData.confirmPassword;

  fetch('/api/auth/register', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(requestData)
  })
    .then(response => {
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      return response.json();
    })
    .then(data => {
      localStorage.setItem('userData', JSON.stringify(data));
      localStorage.setItem('loggedIn', 'true');

          // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —à–∞–ø–∫–µ
          updateUserNameDisplay();
      alert('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!');
      window.location.href = '/login';
    })
    .catch(err => {
      console.error(err);
      alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    });
}

// --- –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤–≤–æ–¥–µ ---
export function setupFormAutoSave() {
  const form = document.getElementById('register-form');
  if (!form) return;

  form.addEventListener("input", () => {
    const userData = saveUserData();
    if (userData) {
      localStorage.setItem("userData", JSON.stringify({ user: userData }));
    }
  });
}

function getNameFromEmail(email) {
    if (!email || typeof email !== 'string') return '–ü—Ä–∏–≤–µ—Ç!';
    const namePart = email.split('@')[0];
    return namePart.charAt(0).toUpperCase() + namePart.slice(1);
}


function parseJwt(token) {
  try {
    const base64Payload = token.split('.')[1];
    const payload = atob(base64Payload);
    return JSON.parse(payload);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JWT:', e);
    return null;
  }
}

////////////////////////

export async function checkRoleAccess(allowedRoles) {
  const jwt = localStorage.getItem('jwt');
  if (!jwt) return false;

  try {
    const res = await fetch('/api/auth/roles', {
      headers: {
        'Authorization': `Bearer ${jwt}`
      }
    });

    if (!res.ok) return false;

    const roles = await res.json();
    return roles.some(role => allowedRoles.includes(role));
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–æ–ª–µ–π:', e);
    return false;
  }
}


/*
export async function userHasRole(role) {
  const userData = localStorage.getItem('userData');
  const jwt = localStorage.getItem('jwt');

  if (!userData || !jwt) return false;

  try {
    const parsed = JSON.parse(userData);
    const roles = parsed.user?.roles || [];

    if (!roles.includes(role)) return false;

    console.log(atob(jwt.split('.')[1]));
    console.log('userHasRole –≤—ã–∑–≤–∞–Ω —Å —Ä–æ–ª—å—é:', role);

    // üëâ –ü—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥, –µ—Å–ª–∏ —Ä–æ–ª—å –ø–æ–¥—Ö–æ–¥—è—â–∞—è
    if (role === 'ROLE_ADMIN' || role === 'ROLE_SUPERADMIN' || role === 'ROLE_MODERATOR') {
      window.location.href = '/admin';
    }

    return true;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ userHasRole:', err);
    return false;
  }
}
*/
export async function redirectByRole(roles) {
  console.log('üì¢ redirectByRole –≤—ã–∑–≤–∞–Ω —Å:', roles);

  const jwt = localStorage.getItem('jwt');
  if (!jwt) {
    console.warn('‚ùå JWT –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é');
    window.location.href = '/index';
    return;
  }

  try {
    const response = await fetch('/api/auth/roles', {
      headers: {
        'Authorization': `Bearer ${jwt}`
      }
    });

    if (!response.ok) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–ª–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /login');
      window.location.href = '/register';
      return;
    }

    const serverRoles = await response.json();
    console.log('‚úÖ –†–æ–ª–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞:', serverRoles);

    if (
      serverRoles.includes('ROLE_ADMIN') ||
      serverRoles.includes('ROLE_MODERATOR') ||
      serverRoles.includes('ROLE_SUPERADMIN')
    ) {
      console.log('‚úÖ –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –≤ /admin');
      window.location.href = '/admin';
    } else {
      console.log('‚ùå –í—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–∞–≥–∞–∑–∏–Ω');
      window.location.href = '/shop';
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–æ–ª–µ–π:', error);
    window.location.href = '/register';
  }
}



export async function handleLogin(event) {
  event.preventDefault();

  const form = event.target.closest('form');
  const emailInput = form.querySelector('#login-email');
  const passwordInput = form.querySelector('#login-password');

  if (!emailInput || !passwordInput) {
    console.error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—è email –∏–ª–∏ password');
    return;
  }

  const email = emailInput.value.trim();
  const password = passwordInput.value.trim();

  try {
    const response = await fetch('/api/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        username: email,
        password: password
      })
    });

    if (response.ok) {
      const result = await response.json();
      console.log('result:', result);

      const user = result.user;
      if (!user) {
        alert('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã');
        return;
      }

      if (user.email && user.email !== email) {
        console.error('–ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ email —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        return;
      }

      const payload = parseJwt(result.token);
      localStorage.setItem('temporaryPassword', payload?.temporaryPassword ? 'true' : 'false');

      const name = (user.name && user.name.trim() !== '') ? user.name : getNameFromEmail(user.email);

      const profile = {
        id: user.id,
        name: name,
        surname: user.surname || '',
        phone: user.phone || '',
        email: user.email || email,
        locality: user.locality || '',
        district: user.district || '',
        region: user.region || '',
        street: user.street || '',
        house: user.house || '',
        apartment: user.apartment || '',
        addressExtra: user.addressExtra || '',
        active: user.active || false,
        roles: user.roles || ['USER'],
      };

      localStorage.setItem('jwt', result.token);
      localStorage.setItem('userData', JSON.stringify({ user: profile }));
      localStorage.setItem('loggedIn', 'true');

      const roles = user.roles || [];
      console.log('üü° –†–æ–ª–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', roles);

      // –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ localStorage:
      const storedUser = JSON.parse(localStorage.getItem('userData'));
      console.log('üîµ –†–æ–ª–∏ –∏–∑ localStorage:', storedUser.user.roles);

      updateUserNameDisplay();
      // üëâ –†–µ–¥–∏—Ä–µ–∫—Ç –ø–æ —Ä–æ–ª—è–º
      await redirectByRole(profile.roles);

    } else if (response.status === 401) {
      alert('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.');
    } else {
      const errorText = await response.text();
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + errorText);
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
    alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

function updateUserProfileDisplay(user) {
  document.getElementById('name').textContent = user.name || '';
  document.getElementById('email').textContent = user.email || '';
  document.getElementById('phone').textContent = user.phone || '';
  document.getElementById('locality').textContent = user.locality || '';
  document.getElementById('district').textContent = user.district || '';
  document.getElementById('region').textContent = user.region || '';
  document.getElementById('street').textContent = user.street || '';
  document.getElementById('house').textContent = user.house || '';
  document.getElementById('apartment').textContent = user.apartment || '';
  document.getElementById('address-extra').textContent = user.addressExtra || '';
}



export async function handleProfileFormSubmit(event) {
  event.preventDefault();

  const password = document.getElementById('password').value.trim();

  if (!password) {
    alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å');
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage —Å —É—á—ë—Ç–æ–º –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ userData.user
  const rawUserData = JSON.parse(localStorage.getItem('userData')) || {};
  const currentUserData = rawUserData.user || {};

  function getFieldValue(id, currentValue) {
    const val = document.getElementById(id).value.trim();
    const result = val === '' ? currentValue || '' : val;
    console.log(id, 'formVal:', val, 'currentVal:', currentValue, 'used:', result);
    return result;
  }

  const updatedData = {
    name: getFieldValue('new-name', currentUserData.name),
    phone: getFieldValue('new-phone', currentUserData.phone),
    locality: getFieldValue('new-locality', currentUserData.locality),
    district: getFieldValue('new-district', currentUserData.district),
    region: getFieldValue('new-region', currentUserData.region),
    street: getFieldValue('new-street', currentUserData.street),
    house: getFieldValue('new-house', currentUserData.house),
    apartment: getFieldValue('new-apartment', currentUserData.apartment),
    addressExtra: getFieldValue('new-address-extra', currentUserData.addressExtra),
    currentPassword: password,
  };

  console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', updatedData);

  try {
    const token = localStorage.getItem('jwt');

    if (!token) {
      alert('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ');
      return;
    }

    const response = await authFetch('/api/user/profile', {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`,
      },
      body: JSON.stringify(updatedData)
    });

    if (response.ok) {
      const result = await response.json();
      alert('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');

      console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);

      if (!result || !result.id) {
        alert('–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage —Å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é user
      localStorage.setItem('userData', JSON.stringify({ user: result }));

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
      saveUserData({ user: result });

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è, –ø–µ—Ä–µ–¥–∞–µ–º –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      updateUserProfileDisplay(result);

      // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
      document.getElementById('password').value = '';

    } else if (response.status === 401) {
      alert('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å');
    } else {
      const errorData = await response.json();
      alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ' + (errorData.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  } catch (error) {
    alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message);
  }
}

export function updateUserNameDisplay() {
    const loggedIn = localStorage.getItem('loggedIn');
    const userNameElem = document.getElementById('username-flower');
    if (!loggedIn || !userNameElem) return;

    if (loggedIn === 'true') {
        const userDataRaw = localStorage.getItem('userData');

        if (!userDataRaw || userDataRaw === 'undefined') {
            console.warn('userData –≤ localStorage –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω');
            userNameElem.textContent = '–ì–æ—Å—Ç—å';
            return;
        }

        let userProfile;
        try {
            userProfile = JSON.parse(userDataRaw);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ JSON.parse(userData):', e);
            userNameElem.textContent = '–ì–æ—Å—Ç—å';
            return;
        }

        // –ó–¥–µ—Å—å –±–µ—Ä–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç user
        const user = userProfile.user || {};

        let displayName = '–ì–æ—Å—Ç—å'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        if (user.name && user.name.trim() !== '') {
            displayName = `–ü—Ä–∏–≤–µ—Ç, ${user.name.trim()}!`;
        } else if (user.email) {
            displayName = getNameFromEmail(user.email);
        }

        userNameElem.textContent = displayName;
        return;
    }

    userNameElem.textContent = '–ì–æ—Å—Ç—å';
}

